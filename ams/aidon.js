
const fs = require("fs");
const JSONdb = require('simple-json-db');
const yaml = require("yamljs");
const EventEmitter = require('events');
const format= require('date-fns/format');

const configFile = "./config.yaml";
const energyFile = './savepower.json'

// Load broker and topics preferences from config file
const config = yaml.load(configFile);
const debug = config.DEBUG;
const hasProduction = config.hasProduction;

// Aidon constants
const METER_VERSION = "020209060101000281FF0A0B"; // 22
const METER_ID = "020209060000600100FF0A10";      // 32
const METER_MODEL = "020209060000600107FF0A04";   // 8
const POWER = "020309060100010700FF06";           // 8
const POWER_PRODUCTION = "020309060100020700FF06";// 8
const POWER_REACTIVE = "020309060100030700FF06";  // 8
const POWER_PRODUCTION_REACTIVE = "020309060100040700FF06"; // 8
const CURRENT_L1 = "0203090601001F0700FF10";      // 4
const CURRENT_L2 = "020309060100330700FF10";      // 4
const CURRENT_L3 = "020309060100470700FF10";      // 4
const VOLTAGE_PHASE_1 = "020309060100200700FF12"; // 4 signed int
const VOLTAGE_PHASE_2 = "020309060100340700FF12"; // 4 signed int
const VOLTAGE_PHASE_3 = "020309060100480700FF12"; // 4 signed int
const DATE = "020209060000010000FF090C";  // 4,2,2,2,2,2
const LAST_METER_CONSOMPTION = "020309060100010800FF06"; // 8
const LAST_METER_PRODUCTION = "020309060100020800FF06";  // 8
const LAST_METER_CONSOMPTION_REACTIVE = "020309060100030800FF06"; // 8
const LAST_METER_PRODUCTION_REACTIVE = "020309060100040800FF06"; // 8

//const list1 = "7EA02A410883130413E6E7000F40000000000101020309060100010700FF060000149702020F00161BC49E7E"
//const list1 = "7EA02A410883130413E6E7000F40000000000101020309060100010700FF06000014B302020F00161B31927E"
// 1-phase
//const list2 = "7ea0d24108831382d6e6e7000f40000000000109020209060101000281ff0a0b4149444f4e5f5630303031020209060000600100ff0a1037333539393932393035363032303139020209060000600107ff0a0436353135020309060100010700ff060000000002020f00161b020309060100020700ff060000047a02020f00161b020309060100030700ff060000000002020f00161d020309060100040700ff06000000e202020f00161d0203090601001f0700ff10ffcd02020fff1621020309060100200700ff12098302020fff16239f407e"
// 3-phase
//const list
//const list2 = "7EA11E41088313EEEEE6E7000F4000000000010D020209060101000281FF0A0B4149444F4E5F5630303031020209060000600100FF0A1037333539393932383931323337303238020209060000600107FF0A0436353334020309060100010700FF06000011D102020F00161B020309060100020700FF060000000002020F00161B020309060100030700FF060000000002020F00161D020309060100040700FF06000001C002020F00161D0203090601001F0700FF10001302020FFF1621020309060100330700FF10006202020FFF1621020309060100470700FF10005302020FFF1621020309060100200700FF12091602020FFF1623020309060100340700FF1208FF02020FFF1623020309060100480700FF12092902020FFF162304357E"
//const list
//const list
const list1 = "7EA02A410883130413E6E7000F40000000000101020309060100010700FF060000149702020F00161BC49E7E"
const list
//const list
const list

function hasData(data, pattern) {
  return data.includes(pattern) ? data.indexOf(pattern) + pattern.length : -1;
}

function hex2DecSign(hex) {
  let dec = parseInt(hex, 16)
  if ((dec & 0x8000) > 0) {
    dec = dec - 0x10000;
  }
  return dec;
}

function hex2Dec(str) {
  return parseInt(str, 16)
}

function hex2asc(hex) {
  let str = hex.toString();
  let result = '';
  for (let n = 0; n < str.length; n += 2) {
    result += String.fromCharCode(parseInt(str.substr(n, 2), 16));
  }
  return result;
}

function skewDays(days) {
  let oneDay = 24 * 60 * 60 * 1000;
  let now = new Date();
  let day = new Date(now.getMyTime() + oneDay * days);
  return day.getFullYear()
    + '-' + addZero(day.getMonth() + 1)
    + '-' + addZero(day.getDate());
}

function getMyTime(msg, index) {
  let Y = hex2Dec(msg.substr(index, 4));
  let M = hex2Dec(msg.substr(index += 4, 2)) - 1;
  let D = hex2Dec(msg.substr(index += 2, 2));
  let h = hex2Dec(msg.substr(index += 4, 2));
  let m = hex2Dec(msg.substr(index += 2, 2));
  let s = hex2Dec(msg.substr(index += 2, 2));
  return format(new Date(Y, M, D, h, m, s), "yyyy-MM-dd'T'HH:mm:ss");
}

const event = new EventEmitter();
const db = new JSONdb(energyFile, {}, { jsonSpaces: 2 });

const aidon = {
  meterType: undefined,
  meterOffset: 71,
  curDay: undefined,
  nextDay: undefined,
  curHour: undefined,
  minPower: undefined,
  maxPower: undefined,
  avgPower: undefined,
  debug: true,

  init: function () {
  },

  getMinPower: function (pow) {
    if (db.get('minPower') === 0 || db.get('minPower') > pow)
      db.set('minPower', pow);
    return db.get('minPower');
  },

  getMaxPower: function (pow) {
    if (db.get('maxPower') === 0 || db.get('maxPower') < pow)
      db.set('maxPower', pow);
    return db.get('maxPower');
  },
  
  onListEvent: function(list,obj){
    event.on(list, obj);
    //console.log('List:', list, obj);
  },

  listFunc: function (buf) {
    let msg = new Object();
    msg.data = buf;

    let obj = new Object();
    obj = { list: 1, data: {}}

    if (hasData(msg.data, METER_VERSION) > -1) {
      obj.data.meterVersion = hex2asc(msg.data.substr(hasData(msg.data, METER_VERSION), 22))
      obj.list = 2;
    }

    if (hasData(msg.data, METER_ID) > -1) {
      obj.data.meterID = hex2asc(msg.data.substr(hasData(msg.data, METER_ID), 32))
    }

    if (hasData(msg.data, METER_MODEL) > -1) {
      obj.data.meterModel = hex2asc(msg.data.substr(hasData(msg.data, METER_MODEL), 8))
    }

    if (hasData(msg.data, POWER) > -1) {
      obj.data.power = hex2Dec(msg.data.substr(hasData(msg.data, POWER), 8)) / 1000;
    }

    if (hasData(msg.data, POWER_REACTIVE) > -1) {
      obj.data.powerReactive = hex2Dec(msg.data.substr(hasData(msg.data, POWER_REACTIVE), 8)) / 1000;
    }

    if (hasData(msg.data, POWER_PRODUCTION) > -1) {
      obj.data.powerProduction = hex2Dec(msg.data.substr(hasData(msg.data, POWER_PRODUCTION), 8)) / 1000;
    }

    if (hasData(msg.data, POWER_PRODUCTION_REACTIVE) > -1) {
      obj.data.powerProductionReactive = hex2Dec(msg.data.substr(hasData(msg.data, POWER_PRODUCTION_REACTIVE), 8)) / 1000;
    }

    if (hasData(msg.data, CURRENT_L1) > -1) {
      obj.data.currentL1 = hex2DecSign(msg.data.substr(hasData(msg.data, CURRENT_L1), 4)) / 10
      ;
    }

    if (hasData(msg.data, CURRENT_L2) > -1) {
      obj.data.currentL2 = hex2DecSign(msg.data.substr(hasData(msg.data, CURRENT_L2), 4)) / 10;
    }

    if (hasData(msg.data, CURRENT_L3) > -1) {
      obj.data.currentL3 = hex2DecSign(msg.data.substr(hasData(msg.data, CURRENT_L3), 4)) / 10;
    }

    if (hasData(msg.data, VOLTAGE_PHASE_1) > -1) {
      obj.data.voltagePhase1 = hex2Dec(msg.data.substr(hasData(msg.data, VOLTAGE_PHASE_1), 4)) / 10;
    }

    if (hasData(msg.data, VOLTAGE_PHASE_2) > -1) {
      obj.data.voltagePhase2 = hex2Dec(msg.data.substr(hasData(msg.data, VOLTAGE_PHASE_2), 4)) / 10;

    }
    if (hasData(msg.data, VOLTAGE_PHASE_3) > -1) {
      obj.data.voltagePhase3 = hex2Dec(msg.data.substr(hasData(msg.data, VOLTAGE_PHASE_3), 4)) / 10;
    }

    if (hasData(msg.data, DATE) > -1) {
      let i = hasData(msg.data, DATE);
      obj.data.meterDate = getMyTime(msg.data, i);
      obj.list = 3;
    }

    if (msg.data.includes(LAST_METER_CONSOMPTION)) {
      obj.data.lastMeterConsumption = hex2Dec(msg.data.substr(hasData(msg.data, LAST_METER_CONSOMPTION), 8)) / 100;
    }

    if (msg.data.includes(LAST_METER_CONSOMPTION_REACTIVE)) {
      obj.data.lastMeterConsumptionReactive = hex2Dec(msg.data.substr(hasData(msg.data, LAST_METER_CONSOMPTION_REACTIVE), 8)) / 100;
    }

    if (msg.data.includes(LAST_METER_PRODUCTION)) {
      obj.data.lastMeterProduction = hex2Dec(msg.data.substr(hasData(msg.data, LAST_METER_PRODUCTION), 8)) / 100;
    }

    if (msg.data.includes(LAST_METER_PRODUCTION_REACTIVE)) {
      obj.data.lastMeterProductionReactive = hex2Dec(msg.data.substr(hasData(msg.data, LAST_METER_PRODUCTION_REACTIVE), 8)) / 100;
    }
    /*
    if (obj.meterDate.substr(11, 8) === "00:00:10") {
      // https://youtu.be/j81Vx-0uM0k
      db.set("prevDayConsumption", obj.lastMeterConsumption);
      if (hasProduction) {
        db.set("prevDayProduction", obj.lastMeterProduction);
        db.set("prevDayProductionReactive", obj.lastMeterProductionReactive);
      }
      pulse.curDay = skewDays(0);
      pulse.nextDay = skewDays(1);
      pulse.curHour = "00:00:10";
    } else if (obj.meterDate.substr(14, 5) === "00:10") {
      pulse.curHour = obj.meterDate.substr(11, 2)
    }
    */
    if (Object.getOwnPropertyNames(obj.data).length === 0) {
      console.error("Raw data packet exception : ", JSON.stringify(msg));
    } else {
      //if (debug) console.log(obj)
    }
    if (debug) console.log(obj)
    return obj;
  },

  listHandlerRemove: function (buf) {
    const hex = buf.toString('hex').toUpperCase();
    let obj = this.listFunc(hex);
    let list = obj.list;
    let msg = obj.data;
    event.emit('list' + list, msg);
  },

  // Debugging listHandler code
  // for running on Kaifa AMS
  // Swap with listHandlerRemove
  // when not debugging
  listHandler: function (buf) {
     if (buf[2] === 0x27 || buf[2] === 0x2a) {
      let hex = list1.toLocaleUpperCase();
      let obj = this.listFunc(hex);
      let msg = obj.data;
      console.log('listHandler list1:', msg);
      event.emit('list1', msg);
    }
    else if (buf[2] === 0x79) {
      let hex = list3.toLocaleUpperCase();
      let obj = this.listFunc(hex);
      let msg = obj.data;
      console.log('listHandler list2:', msg);
      event.emit('list2', msg);
    }
    else if (buf[2] === 0x9b) {
      let hex = list3.toLocaleUpperCase();
      let obj = this.listFunc(hex);
      let msg = obj.data;
      console.log('listHandler list3:', msg);
      event.emit('list3', msg);
    }
  }
}

module.exports = aidon;

/*
//const list1 = "7ea02a410883130413e6e7000f40000000000101020309060100010700ff060000020002020f00161bc12c7e"
//const list1 = "7EA02A410883130413E6E7000F40000000000101020309060100010700FF060000149702020F00161BC49E7E"
//const list1 = "7EA02A410883130413E6E7000F40000000000101020309060100010700FF06000014B302020F00161B31927E"
// 1-phase
//const list2 = "7ea0d24108831382d6e6e7000f40000000000109020209060101000281ff0a0b4149444f4e5f5630303031020209060000600100ff0a1037333539393932393035363032303139020209060000600107ff0a0436353135020309060100010700ff060000000002020f00161b020309060100020700ff060000047a02020f00161b020309060100030700ff060000000002020f00161d020309060100040700ff06000000e202020f00161d0203090601001f0700ff10ffcd02020fff1621020309060100200700ff12098302020fff16239f407e"
// 3-phase
//const list
//const list
//const list
//const list
*/
